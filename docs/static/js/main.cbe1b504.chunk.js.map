{"version":3,"sources":["components/Items/Item.tsx","assets/img/mascara-facial.png","components/Items/ItemImg.tsx","hooks/useFetch.tsx","components/Items/ItemList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Item","data","formatDate","Date","toLocaleDateString","weekday","year","month","day","Cases","ItemImg","className","src","covid","alt","title","width","useFetch","url","useState","response","setResponse","loading","setLoading","getDataFromApi","a","fetch","res","json","useEffect","then","console","log","ItemList","length","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAsBeA,EApBF,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAORC,EAAqB,IAAIC,KAAKF,EAAKE,MAAMC,mBAC7C,QAP8C,CAC9CC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,YAOP,OACE,+BACE,0CADF,IACyBN,EADzB,MACuC,4CACpCD,EAAKQ,UCjBG,MAA0B,2CCU1BC,EARC,WACd,OACE,yBAASC,UAAU,uBAAnB,SACE,qBAAKC,IAAKC,EAAOC,IAAI,QAAQC,MAAM,QAAQC,MAAM,W,uBC2BxCC,EA9BE,SAACC,GAAiB,IAAD,EACAC,mBAAS,IADT,mBACzBC,EADyB,KACfC,EADe,OAEFF,oBAAS,GAFP,mBAEzBG,EAFyB,KAEhBC,EAFgB,KAI1BC,EAAc,uCAAG,4BAAAC,EAAA,+EAEHC,MAAMR,GAFH,cAEfS,EAFe,gBAGPA,EAAIC,OAHG,cAGnBD,EAHmB,yBAIZA,GAJY,2HAAH,qDAuBpB,OALAE,qBAAU,WAPRL,IACGM,MAAK,SAAA7B,GACJoB,EAAYpB,GACZsB,GAAW,MAMfQ,QAAQC,IAAIZ,KACX,IAEI,CAACA,EAAUE,ICaLW,EArCE,WACf,IADkC,EAENhB,EAAS,GAAD,OADhB,8BACgB,wFAFF,mBAE3BG,EAF2B,KAEjBE,EAFiB,KA8BlC,OACE,mCACE,yBAASX,UAAU,2BAAnB,SAzBGS,EAASc,OAIVZ,EACK,2CAIP,qCACE,cAAC,EAAD,IACA,yBAASX,UAAU,2BAAnB,SACE,6BACGS,GACCA,EAASe,KAAI,SAAClC,GAAD,OACX,cAAC,EAAD,CAAsBA,KAAMA,GAAjBA,EAAKE,gBAdnB,uDCIEiC,G,MAbH,WACV,OACE,mCACE,iCACE,yBAASzB,UAAU,iBAAnB,SACE,oEAEF,cAAC,EAAD,WCGO0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cbe1b504.chunk.js","sourcesContent":["import { Covid } from \"../../interfaces/Covid\"\r\n\r\nconst Item = ({ data }: { data: Covid }): JSX.Element => {\r\n  const dateOptions: Intl.DateTimeFormatOptions = {\r\n    weekday: \"long\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  }\r\n  const formatDate: string = new Date(data.Date).toLocaleDateString(\r\n    \"en-US\",\r\n    dateOptions\r\n  )\r\n\r\n  return (\r\n    <li>\r\n      <strong>Date</strong>:{formatDate} - <strong>Cases:</strong>\r\n      {data.Cases}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Item\r\n","export default __webpack_public_path__ + \"static/media/mascara-facial.430b2c3a.png\";","import covid from '@Img/mascara-facial.png'\r\n\r\nconst ItemImg = () => {\r\n  return (\r\n    <section className=\"img__wrapper--center\">\r\n      <img src={covid} alt=\"Covid\" title=\"Covid\" width=\"150\"/>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default ItemImg","import React, { useEffect, useState } from \"react\"\r\n\r\nconst useFetch = (url: string) => {\r\n  const [response, setResponse] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const getDataFromApi = async () => {\r\n    try {\r\n      let res = await fetch(url)\r\n      res = await res.json()\r\n      return res\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  }\r\n\r\n  const populateResponse = () => {\r\n    getDataFromApi()\r\n      .then(data => {\r\n        setResponse(data)\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    populateResponse()\r\n    console.log(response)\r\n  }, [])\r\n\r\n  return [response, loading] as const\r\n}\r\n\r\nexport default useFetch\r\n","import Item from \"@Components/Items/Item\"\r\nimport ItemImg from \"@Components/Items/ItemImg\"\r\nimport useFetch from \"@Hooks/useFetch\"\r\nimport { Covid } from \"@Interfaces/Covid\"\r\n\r\nconst ItemList = (): JSX.Element => {\r\n  const API: string = \"https://api.covid19api.com/\"\r\n  const [response, loading] = useFetch(\r\n    `${API}country/colombia/status/confirmed?from=2021-02-01T00:00:00Z&to=2021-02-15T00:00:00Z`\r\n  )\r\n\r\n  const renderItems = (): JSX.Element => {\r\n    if (!response.length) {\r\n      return <p>No data available</p>\r\n    }\r\n\r\n    if (loading) {\r\n      return <p>Loading...</p>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <ItemImg />\r\n        <section className=\"app list__items--default\">\r\n          <ul>\r\n            {response &&\r\n              response.map((data: Covid) => (\r\n                <Item key={data.Date} data={data} />\r\n              ))}\r\n          </ul>\r\n        </section>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section className=\"app list__items--default\">{renderItems()}</section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ItemList\r\n","import logo from \"./logo.svg\"\nimport ItemList from \"@Components/Items/ItemList\"\nimport \"@Css/app.css\"\n\nconst App = () => {\n  return (\n    <>\n      <main>\n        <section className=\"title--default\">\n          <h1>Dayli cases of COVID in Colombia</h1>\n        </section>\n        <ItemList />\n      </main>\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}